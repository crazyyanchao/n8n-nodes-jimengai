import { IDataObject, IExecuteFunctions } from 'n8n-workflow';
import { ResourceOperations } from '../../../help/type/IResource';
import { JimengApiClient } from '../../utils/JimengApiClient';

const TextToImage31ResultOperate: ResourceOperations = {
	name: 'Text to Image 3.1 Result',
	value: 'textToImage31Result',
	description: 'Get the result of a Text to Image 3.1 task using task ID',
	options: [
		{
			displayName: 'Task ID',
			name: 'task_id',
			type: 'string',
			default: '',
			description: 'Task ID returned from Text to Image 3.1 submission',
			required: true,
		},
		{
			displayName: 'Return URL',
			name: 'return_url',
			type: 'boolean',
			default: true,
			description: 'Whether to return image URLs (valid for 24 hours)',
		},
		{
			displayName: 'Watermark Settings',
			name: 'watermark_settings',
			type: 'collection',
			default: {},
			options: [
				{
					displayName: 'Add Watermark',
					name: 'add_logo',
					type: 'boolean',
					default: false,
					description: 'Whether to add watermark to the generated image',
				},
				{
					displayName: 'Custom Text',
					name: 'logo_text_content',
					type: 'string',
					default: '',
					description: 'Custom watermark text content',
				},
				{
					displayName: 'Language',
					name: 'language',
					type: 'options',
					default: 0,
					options: [
						{ name: 'Chinese (AI Generated)', value: 0 },
						{ name: 'English (Generated by AI)', value: 1 },
					],
					description: 'Watermark language',
				},
				{
					displayName: 'Opacity',
					name: 'opacity',
					type: 'number',
					default: 0.3,
					typeOptions: {
						minValue: 0,
						maxValue: 1,
					},
					description: 'Watermark opacity (0-1)',
				},
				{
					displayName: 'Position',
					name: 'position',
					type: 'options',
					default: 0,
					options: [
						{ name: 'Bottom Right', value: 0 },
						{ name: 'Bottom Left', value: 1 },
						{ name: 'Top Left', value: 2 },
						{ name: 'Top Right', value: 3 },
					],
					description: 'Watermark position',
				},
			],
		},
		{
			displayName: 'AIGC Meta Settings',
			name: 'aigc_meta_settings',
			type: 'collection',
			default: {},
			options: [
				{
					displayName: 'Content Producer',
					name: 'content_producer',
					type: 'string',
					default: '',
					description: 'Content generation service ID',
				},
				{
					displayName: 'Producer ID',
					name: 'producer_id',
					type: 'string',
					default: '',
					description: 'Unique ID for this image data from content generation service',
				},
				{
					displayName: 'Content Propagator',
					name: 'content_propagator',
					type: 'string',
					default: '',
					description: 'Content propagation service provider ID',
				},
				{
					displayName: 'Propagate ID',
					name: 'propagate_id',
					type: 'string',
					default: '',
					description: 'Unique ID for this image data from propagation service provider',
				},
			],
		},
	],
	async call(this: IExecuteFunctions, index: number): Promise<IDataObject> {
		const taskId = this.getNodeParameter('task_id', index) as string;
		const returnUrl = this.getNodeParameter('return_url', index) as boolean;
		const watermarkSettings = this.getNodeParameter('watermark_settings', index) as any;
		const aigcMetaSettings = this.getNodeParameter('aigc_meta_settings', index) as any;
		const credentials = await this.getCredentials('jimengCredentialsApi');

		// Validate task ID
		if (!taskId || taskId.trim() === '') {
			throw new Error('Task ID is required. Please provide a valid task ID from the Text to Image 3.1 submission.');
		}

		const client = new JimengApiClient({
			accessKeyId: credentials.accessKeyId as string,
			secretAccessKey: credentials.secretAccessKey as string,
			region: credentials.region as string,
		});

		// Build watermark configuration
		let logoInfo = undefined;
		if (watermarkSettings && Object.keys(watermarkSettings).length > 0) {
			logoInfo = {
				add_logo: watermarkSettings.add_logo || false,
				position: watermarkSettings.position || 0,
				language: watermarkSettings.language || 0,
				opacity: watermarkSettings.opacity || 0.3,
				logo_text_content: watermarkSettings.logo_text_content || '',
			};
		}

		// Build AIGC metadata configuration
		let aigcMeta = undefined;
		if (aigcMetaSettings && Object.keys(aigcMetaSettings).length > 0) {
			aigcMeta = {
				content_producer: aigcMetaSettings.content_producer || '',
				producer_id: aigcMetaSettings.producer_id || '',
				content_propagator: aigcMetaSettings.content_propagator || '',
				propagate_id: aigcMetaSettings.propagate_id || '',
			};
		}

		try {
			const data = await client.getTextToImage31Result(taskId, {
				return_url: returnUrl,
				logo_info: logoInfo,
				aigc_meta: aigcMeta,
			});

			return {
				code: data.code,
				message: data.message,
				requestId: data.request_id,
				status: data.status,
				timeElapsed: data.time_elapsed,
				data: {
					taskId: data.data?.task_id,
					status: data.data?.status,
					binaryDataBase64: data.data?.binary_data_base64 || [],
					imageUrls: data.data?.image_urls || [],
				},
			};
		} catch (error: any) {
			// Provide more specific error messages based on the error type
			if (error.message.includes('Server internal error')) {
				throw new Error(`Server internal error, please try again later. Task ID: ${taskId}`);
			}
			if (error.message.includes('Task not found')) {
				throw new Error(`Task not found. Please check if the Task ID "${taskId}" is correct and hasn't expired (tasks expire after 12 hours).`);
			}
			if (error.message.includes('Task has expired')) {
				throw new Error(`Task has expired. Please resubmit the Text to Image 3.1 task and use the new Task ID.`);
			}
			if (error.message.includes('QPS limit exceeded')) {
				throw new Error(`Request rate limit exceeded. Please wait a moment and try again.`);
			}
			if (error.message.includes('Concurrency limit exceeded')) {
				throw new Error(`Concurrent request limit exceeded. Please wait for other requests to complete and try again.`);
			}
			// Re-throw the original error if it's not one of the handled cases
			throw error;
		}
	},
};

export default TextToImage31ResultOperate;
