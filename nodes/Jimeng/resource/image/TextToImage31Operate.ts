import { IDataObject, IExecuteFunctions } from 'n8n-workflow';
import { ResourceOperations } from '../../../help/type/IResource';
import { JimengApiClient } from '../../utils/JimengApiClient';

const TextToImage31Operate: ResourceOperations = {
	name: 'Text to Image 3.1',
	value: 'textToImage31',
	description: 'Generate image from text prompt using Jimeng 3.1 model',
	options: [
		{
			displayName: 'Prompt',
			name: 'prompt',
			type: 'string',
			default: '',
			description: 'Text description for image generation (recommended length <=120 characters, max 800 characters)',
			required: true,
		},
		{
			displayName: 'Use Pre LLM',
			name: 'use_pre_llm',
			type: 'boolean',
			default: true,
			description: 'Whether to enable text expansion for prompt optimization',
		},
		{
			displayName: 'Width',
			name: 'width',
			type: 'number',
			default: 1328,
			description: 'Image width in pixels (512-2048)',
			typeOptions: {
				minValue: 512,
				maxValue: 2048,
			},
		},
		{
			displayName: 'Height',
			name: 'height',
			type: 'number',
			default: 1328,
			description: 'Image height in pixels (512-2048)',
			typeOptions: {
				minValue: 512,
				maxValue: 2048,
			},
		},
		{
			displayName: 'Seed',
			name: 'seed',
			type: 'number',
			default: -1,
			description: 'Random seed (-1 for random)',
		},
		{
			displayName: 'Return URL',
			name: 'return_url',
			type: 'boolean',
			default: true,
			description: 'Whether to return image URLs (valid for 24 hours)',
		},
		{
			displayName: 'Watermark Settings',
			name: 'watermark_settings',
			type: 'fixedCollection',
			default: {},
			options: [
				{
					name: 'watermark',
					displayName: 'Watermark',
					values: [
						{
							displayName: 'Add Watermark',
							name: 'add_logo',
							type: 'boolean',
							default: false,
							description: 'Whether to add watermark',
						},
						{
							displayName: 'Custom Text',
							name: 'logo_text_content',
							type: 'string',
							default: '',
							description: 'Custom watermark text content',
						},
						{
							displayName: 'Language',
							name: 'language',
							type: 'options',
							default: 0,
							options: [
								{ name: 'Chinese (AI Generated)', value: 0 },
								{ name: 'English (Generated by AI)', value: 1 },
							],
							description: 'Watermark language',
						},
						{
							displayName: 'Opacity',
							name: 'opacity',
							type: 'number',
							default: 0.3,
							description: 'Watermark opacity (0-1)',
							typeOptions: {
								minValue: 0,
								maxValue: 1,
							},
						},
						{
							displayName: 'Position',
							name: 'position',
							type: 'options',
							default: 0,
							options: [
								{ name: 'Bottom Right', value: 0 },
								{ name: 'Bottom Left', value: 1 },
								{ name: 'Top Left', value: 2 },
								{ name: 'Top Right', value: 3 },
							],
							description: 'Watermark position',
						},
					],
				},
			],
			description: 'Watermark configuration',
		},
		{
			displayName: 'AIGC Meta Settings',
			name: 'aigc_meta_settings',
			type: 'fixedCollection',
			default: {},
			options: [
				{
					name: 'aigc_meta',
					displayName: 'AIGC Meta',
					values: [
						{
							displayName: 'Content Producer',
							name: 'content_producer',
							type: 'string',
							default: '',
							description: 'Content generation service ID',
						},
						{
							displayName: 'Producer ID',
							name: 'producer_id',
							type: 'string',
							default: '',
							description: 'Unique ID for this image data from content generation service provider',
						},
						{
							displayName: 'Content Propagator',
							name: 'content_propagator',
							type: 'string',
							default: '',
							description: 'Content propagation service provider ID',
						},
						{
							displayName: 'Propagate ID',
							name: 'propagate_id',
							type: 'string',
							default: '',
							description: 'Unique ID for this image data from propagation service provider',
						},
					],
				},
			],
			description: 'AIGC metadata configuration',
		},
	],
	async call(this: IExecuteFunctions, index: number): Promise<IDataObject> {
		const prompt = this.getNodeParameter('prompt', index) as string;
		const usePreLlm = this.getNodeParameter('use_pre_llm', index) as boolean;
		const width = this.getNodeParameter('width', index) as number;
		const height = this.getNodeParameter('height', index) as number;
		const seed = this.getNodeParameter('seed', index) as number;
		const returnUrl = this.getNodeParameter('return_url', index) as boolean;
		const watermarkSettings = this.getNodeParameter('watermark_settings', index) as any;
		const aigcMetaSettings = this.getNodeParameter('aigc_meta_settings', index) as any;
		const credentials = await this.getCredentials('jimengCredentialsApi');

		const client = new JimengApiClient({
			accessKeyId: credentials.accessKeyId as string,
			secretAccessKey: credentials.secretAccessKey as string,
			region: credentials.region as string,
		});

		// Build watermark configuration
		let logoInfo = undefined;
		if (watermarkSettings && watermarkSettings.watermark) {
			const watermark = watermarkSettings.watermark;
			logoInfo = {
				add_logo: watermark.add_logo || false,
				position: watermark.position || 0,
				language: watermark.language || 0,
				opacity: watermark.opacity || 0.3,
				logo_text_content: watermark.logo_text_content || '',
			};
		}

		// Build AIGC metadata configuration
		let aigcMeta = undefined;
		if (aigcMetaSettings && aigcMetaSettings.aigc_meta) {
			const meta = aigcMetaSettings.aigc_meta;
			aigcMeta = {
				content_producer: meta.content_producer || '',
				producer_id: meta.producer_id || '',
				content_propagator: meta.content_propagator || '',
				propagate_id: meta.propagate_id || '',
			};
		}

		const data = await client.textToImage31({
			prompt,
			use_pre_llm: usePreLlm,
			width,
			height,
			seed: seed === -1 ? undefined : seed,
			return_url: returnUrl,
			logo_info: logoInfo,
			aigc_meta: aigcMeta,
		});

		return {
			taskId: data.data?.task_id,
			status: data.data?.status,
			images: data.data?.image_urls || [],
			binaryData: data.data?.binary_data_base64 || [],
			error: data.message,
			requestId: data.request_id,
		};
	},
};

export default TextToImage31Operate;
