import { IDataObject, IExecuteFunctions } from 'n8n-workflow';
import { ResourceOperations } from '../../../help/type/IResource';
import { JimengApiClient } from '../../utils/JimengApiClient';

const TextToImageOperate: ResourceOperations = {
	name: 'Text to Image 2.1',
	value: 'textToImage21',
	description: 'Generate image from text prompt using Jimeng 2.1 model',
	options: [
		{
			displayName: 'Prompt',
			name: 'prompt',
			type: 'string',
			default: '',
			description: 'Text description for image generation (supports Chinese and English)',
			required: true,
		},
		{
			displayName: 'Width',
			name: 'width',
			type: 'number',
			default: 512,
			description: 'Image width in pixels (256-768)',
			typeOptions: {
				minValue: 256,
				maxValue: 768,
			},
		},
		{
			displayName: 'Height',
			name: 'height',
			type: 'number',
			default: 512,
			description: 'Image height in pixels (256-768)',
			typeOptions: {
				minValue: 256,
				maxValue: 768,
			},
		},
		{
			displayName: 'Seed',
			name: 'seed',
			type: 'number',
			default: -1,
			description: 'Random seed for generation (-1 for random)',
		},
		{
			displayName: 'Use Pre LLM',
			name: 'use_pre_llm',
			type: 'boolean',
			default: true,
			description: 'Whether to enable text expansion for prompt optimization (recommended for short prompts)',
		},
		{
			displayName: 'Use Super Resolution',
			name: 'use_sr',
			type: 'boolean',
			default: true,
			description: 'Whether to enable AIGC super resolution (output will be 2x the input dimensions)',
		},
		{
			displayName: 'Return URL',
			name: 'return_url',
			type: 'boolean',
			default: true,
			description: 'Whether to return image URLs (valid for 24 hours)',
		},
		{
			displayName: 'Watermark Settings',
			name: 'watermark_settings',
			type: 'collection',
			default: {},
			options: [
				{
					displayName: 'Add Watermark',
					name: 'add_logo',
					type: 'boolean',
					default: false,
					description: 'Whether to add watermark to the generated image',
				},
				{
					displayName: 'Custom Text',
					name: 'logo_text_content',
					type: 'string',
					default: '',
					description: 'Custom watermark text content',
				},
				{
					displayName: 'Language',
					name: 'language',
					type: 'options',
					default: 0,
					options: [
						{ name: 'Chinese (AI Generated)', value: 0 },
						{ name: 'English (Generated by AI)', value: 1 },
					],
					description: 'Watermark language',
				},
				{
					displayName: 'Opacity',
					name: 'opacity',
					type: 'number',
					default: 0.3,
					typeOptions: {
						minValue: 0,
						maxValue: 1,
					},
					description: 'Watermark opacity (0-1)',
				},
				{
					displayName: 'Position',
					name: 'position',
					type: 'options',
					default: 0,
					options: [
						{ name: 'Bottom Right', value: 0 },
						{ name: 'Bottom Left', value: 1 },
						{ name: 'Top Left', value: 2 },
						{ name: 'Top Right', value: 3 },
					],
					description: 'Watermark position',
				},
			],
		},
		{
			displayName: 'AIGC Meta Settings',
			name: 'aigc_meta_settings',
			type: 'collection',
			default: {},
			options: [
				{
					displayName: 'Content Producer',
					name: 'content_producer',
					type: 'string',
					default: '',
					description: 'Content generation service ID',
				},
				{
					displayName: 'Producer ID',
					name: 'producer_id',
					type: 'string',
					default: '',
					description: 'Unique ID for this image data from content generation service',
				},
				{
					displayName: 'Content Propagator',
					name: 'content_propagator',
					type: 'string',
					default: '',
					description: 'Content propagation service provider ID',
				},
				{
					displayName: 'Propagate ID',
					name: 'propagate_id',
					type: 'string',
					default: '',
					description: 'Unique ID for this image data from propagation service provider',
				},
			],
		},
	],
	async call(this: IExecuteFunctions, index: number): Promise<IDataObject> {
		const prompt = this.getNodeParameter('prompt', index) as string;
		const width = this.getNodeParameter('width', index) as number;
		const height = this.getNodeParameter('height', index) as number;
		const seed = this.getNodeParameter('seed', index) as number;
		const usePreLlm = this.getNodeParameter('use_pre_llm', index) as boolean;
		const useSr = this.getNodeParameter('use_sr', index) as boolean;
		const returnUrl = this.getNodeParameter('return_url', index) as boolean;
		const watermarkSettings = this.getNodeParameter('watermark_settings', index) as any;
		const aigcMetaSettings = this.getNodeParameter('aigc_meta_settings', index) as any;
		const credentials = await this.getCredentials('jimengCredentialsApi');

		const client = new JimengApiClient({
			accessKeyId: credentials.accessKeyId as string,
			secretAccessKey: credentials.secretAccessKey as string,
			region: credentials.region as string,
		});

		// Build watermark configuration
		let logoInfo = undefined;
		if (watermarkSettings && Object.keys(watermarkSettings).length > 0) {
			logoInfo = {
				add_logo: watermarkSettings.add_logo || false,
				position: watermarkSettings.position || 0,
				language: watermarkSettings.language || 0,
				opacity: watermarkSettings.opacity || 0.3,
				logo_text_content: watermarkSettings.logo_text_content || '',
			};
		}

		// Build AIGC metadata configuration
		let aigcMeta = undefined;
		if (aigcMetaSettings && Object.keys(aigcMetaSettings).length > 0) {
			aigcMeta = {
				content_producer: aigcMetaSettings.content_producer || '',
				producer_id: aigcMetaSettings.producer_id || '',
				content_propagator: aigcMetaSettings.content_propagator || '',
				propagate_id: aigcMetaSettings.propagate_id || '',
			};
		}

		const data = await client.textToImage21({
			prompt,
			width,
			height,
			seed: seed === -1 ? undefined : seed,
			use_pre_llm: usePreLlm,
			use_sr: useSr,
			return_url: returnUrl,
			logo_info: logoInfo,
			aigc_meta: aigcMeta,
		});

		return {
			code: data.code,
			message: data.message,
			requestId: data.request_id,
			status: data.status,
			timeElapsed: data.time_elapsed,
			note: 'Text-to-Image 2.1 is a synchronous interface, results are returned directly, no status query needed',
			data: {
				algorithmBaseResp: data.data.algorithm_base_resp,
				binaryDataBase64: data.data.binary_data_base64 || [],
				imageUrls: data.data.image_urls || [],
				inferCtx: data.data.infer_ctx,
				llmResult: data.data.llm_result,
				peResult: data.data.pe_result,
				predictTagsResult: data.data.predict_tags_result,
				rephraserResult: data.data.rephraser_result,
				vlmResult: data.data.vlm_result,
			},
		};
	},
};

export default TextToImageOperate;
