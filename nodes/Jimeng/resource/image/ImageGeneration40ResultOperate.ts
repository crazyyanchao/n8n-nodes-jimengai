import { IDataObject, IExecuteFunctions } from 'n8n-workflow';
import { ResourceOperations } from '../../../help/type/IResource';
import { JimengApiClient } from '../../utils/JimengApiClient';

const ImageGeneration40ResultOperate: ResourceOperations = {
	name: 'Image Generation 4.0 Result',
	value: 'imageGeneration40Result',
	description: 'Get the result of an Image Generation 4.0 task using task ID',
	options: [
		{
			displayName: 'Task ID',
			name: 'task_id',
			type: 'string',
			default: '',
			description: 'Task ID returned from Image Generation 4.0 submission',
			required: true,
		},
		{
			displayName: 'Return URL',
			name: 'return_url',
			type: 'boolean',
			default: true,
			description: 'Whether to return image URLs (valid for 24 hours)',
		},
		{
			displayName: 'Watermark Settings',
			name: 'watermark_settings',
			type: 'fixedCollection',
			default: {},
			options: [
				{
					name: 'watermark',
					displayName: 'Watermark',
					values: [
						{
							displayName: 'Add Watermark',
							name: 'add_logo',
							type: 'boolean',
							default: false,
							description: 'Whether to add watermark to the generated image',
						},
						{
							displayName: 'Custom Text',
							name: 'logo_text_content',
							type: 'string',
							default: '',
							description: 'Custom watermark text content',
						},
						{
							displayName: 'Language',
							name: 'language',
							type: 'options',
							default: 0,
							options: [
								{ name: 'Chinese (AI Generated)', value: 0 },
								{ name: 'English (Generated by AI)', value: 1 },
							],
							description: 'Watermark language',
						},
						{
							displayName: 'Opacity',
							name: 'opacity',
							type: 'number',
							default: 1,
							typeOptions: {
								minValue: 0,
								maxValue: 1,
							},
							description: 'Watermark opacity (0-1)',
						},
						{
							displayName: 'Position',
							name: 'position',
							type: 'options',
							default: 0,
							options: [
								{ name: 'Bottom Right', value: 0 },
								{ name: 'Bottom Left', value: 1 },
								{ name: 'Top Left', value: 2 },
								{ name: 'Top Right', value: 3 },
							],
							description: 'Watermark position',
						},
					],
				},
			],
			description: 'Watermark configuration for the generated images',
		},
	],
	async call(this: IExecuteFunctions, index: number): Promise<IDataObject> {
		const taskId = this.getNodeParameter('task_id', index) as string;
		const returnUrl = this.getNodeParameter('return_url', index) as boolean;
		const watermarkSettings = this.getNodeParameter('watermark_settings', index) as any;
		const credentials = await this.getCredentials('jimengCredentialsApi');

		// Validate task ID
		if (!taskId || taskId.trim() === '') {
			throw new Error('Task ID is required. Please provide a valid task ID from the Image Generation 4.0 submission.');
		}

		const client = new JimengApiClient({
			accessKeyId: credentials.accessKeyId as string,
			secretAccessKey: credentials.secretAccessKey as string,
			region: credentials.region as string,
		});

		// Build watermark configuration
		let logoInfo = undefined;
		if (watermarkSettings && watermarkSettings.watermark) {
			const watermark = watermarkSettings.watermark;
			logoInfo = {
				add_logo: watermark.add_logo || false,
				position: watermark.position || 0,
				language: watermark.language || 0,
				opacity: watermark.opacity || 1,
				logo_text_content: watermark.logo_text_content || '',
			};
		}

		try {
			const data = await client.getImageGeneration40Result(taskId, {
				return_url: returnUrl,
				logo_info: logoInfo,
			});

			return {
				code: data.code,
				message: data.message,
				requestId: data.request_id,
				status: data.status,
				timeElapsed: data.time_elapsed,
				data: {
					taskId: data.data?.task_id,
					status: data.data?.status,
					binaryDataBase64: data.data?.binary_data_base64 || [],
					imageUrls: data.data?.image_urls || [],
				},
			};
		} catch (error: any) {
			// Provide more specific error messages based on the error type
			if (error.message.includes('Server internal error')) {
				throw new Error(`Server internal error, please try again later. Task ID: ${taskId}`);
			}
			if (error.message.includes('Task not found')) {
				throw new Error(`Task not found. Please check if the Task ID "${taskId}" is correct and hasn't expired (tasks expire after 12 hours).`);
			}
			if (error.message.includes('Task has expired')) {
				throw new Error(`Task has expired. Please resubmit the Image Generation 4.0 task and use the new Task ID.`);
			}
			if (error.message.includes('QPS limit exceeded')) {
				throw new Error(`Request rate limit exceeded. Please wait a moment and try again.`);
			}
			if (error.message.includes('Concurrency limit exceeded')) {
				throw new Error(`Concurrent request limit exceeded. Please wait for other requests to complete and try again.`);
			}
			// Re-throw the original error if it's not one of the handled cases
			throw error;
		}
	},
};

export default ImageGeneration40ResultOperate;
